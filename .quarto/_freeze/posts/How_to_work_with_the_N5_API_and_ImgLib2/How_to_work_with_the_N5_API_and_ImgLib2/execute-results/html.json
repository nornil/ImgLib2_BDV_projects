{
  "hash": "0ae423a91b8242efabc4e86e275a5c99",
  "result": {
    "markdown": "---\ntitle: \"How to work with the N5 API and ImgLib2?\"\nauthor: \"Stephan Saalfeld\"\ndate: \"2023-09-27\"\ncategories: [ imglib2 , n5,   hdf5 ,  zarr  , jupyter,   notebook] \nexecute:\n  echo: false\n---\n\n\nIn this notebook, we will learn how to work with the [N5 API](https://github.com/saalfeldlab/n5) and [ImgLib2](https://imglib2.net).\\n\",\n    \"\\n\",\n    \"The N5 API unifies block-wise access to potentially very large *n*-dimensional data over a variety of storage backends.  Those backends currently are the simple [N5 format on the local filesystem](https://github.com/saalfeldlab/n5#file-system-specification), [Google Cloud](https://github.com/saalfeldlab/n5-google-cloud) and [AWS-S3](https://github.com/saalfeldlab/n5-aws-s3), the [HDF5 file format](https://www.hdfgroup.org/solutions/hdf5/) and [Zarr](https://github.com/saalfeldlab/n5-zarr).  The [ImgLib2 bindings](https://github.com/saalfeldlab/n5-imglib2) use this API to make this data available as memory cached lazy cell images through ImgLib2.\\n\",\n    \"\\n\",\n    \"This notebook uses code and data examples from the [ImgLib2 large data tutorial](https://www.janelia.org/sites/default/files/You%20%2B%20Janelia/Conferences/3.pdf) [I2K2020 workshop](https://www.janelia.org/you-janelia/conferences/from-images-to-knowledge-with-imagej-friends) ([GitHub repository](https://github.com/saalfeldlab/i2k2020-imglib2-advanced)).\\n\",\n    \"\\n\",\n    \"First let's add the necessary dependencies.  We will load the [`n5-ij` module](https://github.com/saalfeldlab/n5-ij) which will transitively load [ImgLib2](https://imglib2.net) and all the N5 API modules that we will be using in this notebook.  It will also load [ImageJ](https://imagej.nih.gov/ij/) which we will use to display data.\"\n   \n\n<a href=\"https://colab.research.google.com/github/jfrench/LinearRegression/blob/master/notebooks/z-oer-demo-notebook.ipynb\"> <img src=\"https://colab.research.google.com/assets/colab-badge.svg\"/> </a>\n\n\n``` \n%%loadFromPOM\n<repository>\n    <id>scijava.public</id>\n    <url>https://maven.scijava.org/content/groups/public</url>\n</repository>\n<dependency>\n    <groupId>org.janelia.saalfeldlab</groupId>\n    <artifactId>n5</artifactId>\n    <version>2.5.1</version>\n</dependency>\n<dependency>\n    <groupId>org.janelia.saalfeldlab</groupId>\n    <artifactId>n5-ij</artifactId>\n    <version>3.2.2</version>\n</dependency>\n```\n\n \n# Load some data\n\n\n::: {.cell}\n\n:::\n\n\nNow, we register a simple renderer that uses [ImgLib2's ImageJ bridge](https://github.com/imglib/imglib2-ij/blob/master/src/main/java/net/imglib2/img/display/imagej/ImageJFunctions.java) and [Spencer Park's image renderer](https://github.com/SpencerPark/jupyter-jvm-basekernel/blob/master/src/main/java/io/github/spencerpark/jupyter/kernel/display/common/Image.java) to render the first 2D slice of a `RandomAccessibleInterval` into the notebook.  We also add a renderer for arrays and maps, because we want to list directories and attributes maps later.\"\n ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}