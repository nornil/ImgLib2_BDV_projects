[
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "Thank you for considering contributing to the BigDataViewer open source project! By contributing, you are helping to improve and grow the software for everyone in the community. We appreciate your time and effort.\n\n\n\nGovernance\n\nCode of Conduct\n\nGetting Started\n\nPrerequisites & Setting up the Development Environment\n\nMaking Contributions\n\nCreating Issues\nWorking on Issues\nSubmitting Pull Requests\n\nCode Guidelines\nTesting\nDocumentation\nCommunity\nLicense\n\n\n\n\nAnd the team role definitions: Founder - Created the project. Does not imply any current participation or responsibility. Lead - Has decision-making authority: timing of releases, inclusion of features, etc. Maintainer - Merges patch submissions. Cuts releases.\n\n\n\nBefore contributing, please review our Code of Conduct. We aim to foster an inclusive and respectful community where everyone feels safe to participate.\n\n\n\n\n\nList any software, tools, libraries, or dependencies contributors need to have installed before they can contribute. Provide clear instructions or links for installation.\n\n\n\nBriefly describe the steps to set up the development environment. Include instructions for cloning the repository, installing dependencies, and any configuration that’s needed.\n\n\n\n\nPlease see the general guidlines on how to contribute to an existing plugin or library: https://imagej.net/develop/improving-the-code\n\n\nIf you find a bug, have a feature request, or encounter any issues, please search our ImgLib2 issue tracker and BDV issue tracker to see if it has already been reported. If not, feel free to create a new issue and provide as much detail as possible.\n\n\n\nIf you want to work on an existing issue, please follow these steps:\n\nComment on the issue to express your interest in working on it.\nFork the repository and create a new branch for your work.\nMake your changes and commit them with clear commit messages.\nEnsure your code follows our Code Guidelines.\nUpdate the documentation if necessary.\nRun tests to ensure your changes don’t break existing functionality.\n\n\n\n\n\nPush your changes to your forked repository.\nCreate a pull request (PR) from your branch to our main repository’s appropriate branch.\nProvide a detailed description of your changes in the PR.\nReference any related issues using keywords (e.g., “Closes #123”).\nBe ready to address feedback and make necessary changes.\n\n\n\n\n\n\nUse consistent code formatting and style throughout the project.\nFollow naming conventions for variables, functions, and classes.\nEnsure your code is well-documented.\nWrite meaningful commit messages.\n\n\n\n\nExplain how to run tests and provide information about the testing framework used.\n\n\n\nIf your changes introduce new features or modify existing ones, please update the documentation accordingly. This includes code comments, README files, and any additional documentation files.\n\n\n\nJoin in our community discussions on imagesc.zulipchat.com for discussions. For more general questions of broad interest and announcements the image.sc forum can be used advantageously. We welcome your feedback and ideas.\n\n\n\nBy contributing to this project, you agree that your contributions will be licensed under the project’s license ImgLib2 license and BigDataViewer license a BSD 2-Clause “Simplified” License. If you’re not comfortable with this, please consider refrain from contributing."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#table-of-contents",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#table-of-contents",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "Governance\n\nCode of Conduct\n\nGetting Started\n\nPrerequisites & Setting up the Development Environment\n\nMaking Contributions\n\nCreating Issues\nWorking on Issues\nSubmitting Pull Requests\n\nCode Guidelines\nTesting\nDocumentation\nCommunity\nLicense"
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#governance",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#governance",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "And the team role definitions: Founder - Created the project. Does not imply any current participation or responsibility. Lead - Has decision-making authority: timing of releases, inclusion of features, etc. Maintainer - Merges patch submissions. Cuts releases."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#code-of-conduct",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#code-of-conduct",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "Before contributing, please review our Code of Conduct. We aim to foster an inclusive and respectful community where everyone feels safe to participate."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#getting-started",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#getting-started",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "List any software, tools, libraries, or dependencies contributors need to have installed before they can contribute. Provide clear instructions or links for installation.\n\n\n\nBriefly describe the steps to set up the development environment. Include instructions for cloning the repository, installing dependencies, and any configuration that’s needed."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#making-contributions",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#making-contributions",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "Please see the general guidlines on how to contribute to an existing plugin or library: https://imagej.net/develop/improving-the-code\n\n\nIf you find a bug, have a feature request, or encounter any issues, please search our ImgLib2 issue tracker and BDV issue tracker to see if it has already been reported. If not, feel free to create a new issue and provide as much detail as possible.\n\n\n\nIf you want to work on an existing issue, please follow these steps:\n\nComment on the issue to express your interest in working on it.\nFork the repository and create a new branch for your work.\nMake your changes and commit them with clear commit messages.\nEnsure your code follows our Code Guidelines.\nUpdate the documentation if necessary.\nRun tests to ensure your changes don’t break existing functionality.\n\n\n\n\n\nPush your changes to your forked repository.\nCreate a pull request (PR) from your branch to our main repository’s appropriate branch.\nProvide a detailed description of your changes in the PR.\nReference any related issues using keywords (e.g., “Closes #123”).\nBe ready to address feedback and make necessary changes."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#code-guidelines",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#code-guidelines",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "Use consistent code formatting and style throughout the project.\nFollow naming conventions for variables, functions, and classes.\nEnsure your code is well-documented.\nWrite meaningful commit messages."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#testing",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#testing",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "Explain how to run tests and provide information about the testing framework used."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#documentation",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#documentation",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "If your changes introduce new features or modify existing ones, please update the documentation accordingly. This includes code comments, README files, and any additional documentation files."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#community",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#community",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "Join in our community discussions on imagesc.zulipchat.com for discussions. For more general questions of broad interest and announcements the image.sc forum can be used advantageously. We welcome your feedback and ideas."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_bigdataviewer.html#license",
    "href": "contributing_guidelines/guidelines_for_bigdataviewer.html#license",
    "title": "Contributing Guidelines BigDataViewer",
    "section": "",
    "text": "By contributing to this project, you agree that your contributions will be licensed under the project’s license ImgLib2 license and BigDataViewer license a BSD 2-Clause “Simplified” License. If you’re not comfortable with this, please consider refrain from contributing."
  },
  {
    "objectID": "contributing_guidelines/guidelines_for_imglib2.html",
    "href": "contributing_guidelines/guidelines_for_imglib2.html",
    "title": "ImgLib2 and BigDataviewer projects",
    "section": "",
    "text": "guidelines_for_imglib2 content comes here…"
  },
  {
    "objectID": "blog_posts/2022-09-27-n5-imglib2/2022-09-27-n5-imglib2.html",
    "href": "blog_posts/2022-09-27-n5-imglib2/2022-09-27-n5-imglib2.html",
    "title": "How to work with the N5 API and ImgLib2?",
    "section": "",
    "text": "Read and write ImgLib2 data with the N5 API\n\n\ntoc: false\nbranch: master\nbadges: true\ncomments: true\nauthor: Stephan Saalfeld\ncategories: [imglib2, n5, hdf5, zarr, jupyter, notebook]\n\nIn this notebook, we will learn how to work with the N5 API and ImgLib2.\nThe N5 API unifies block-wise access to potentially very large n-dimensional data over a variety of storage backends. Those backends currently are the simple N5 format on the local filesystem, Google Cloud and AWS-S3, the HDF5 file format and Zarr. The ImgLib2 bindings use this API to make this data available as memory cached lazy cell images through ImgLib2.\nThis notebook uses code and data examples from the ImgLib2 large data tutorial I2K2020 workshop (GitHub repository).\nFirst let’s add the necessary dependencies. We will load the n5-ij module which will transitively load ImgLib2 and all the N5 API modules that we will be using in this notebook. It will also load ImageJ which we will use to display data.\n%%loadFromPOM\n&lt;repository&gt;\n    &lt;id&gt;scijava.public&lt;/id&gt;\n    &lt;url&gt;https://maven.scijava.org/content/groups/public&lt;/url&gt;\n&lt;/repository&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.janelia.saalfeldlab&lt;/groupId&gt;\n    &lt;artifactId&gt;n5&lt;/artifactId&gt;\n    &lt;version&gt;2.5.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.janelia.saalfeldlab&lt;/groupId&gt;\n    &lt;artifactId&gt;n5-ij&lt;/artifactId&gt;\n    &lt;version&gt;3.2.2&lt;/version&gt;\n&lt;/dependency&gt;\nNow, we register a simple renderer that uses ImgLib2’s ImageJ bridge and Spencer Park’s image renderer to render the first 2D slice of a RandomAccessibleInterval into the notebook. We also add a renderer for arrays and maps, because we want to list directories and attributes maps later.\nimport com.google.gson.*;\nimport io.github.spencerpark.jupyter.kernel.display.common.*;\nimport io.github.spencerpark.jupyter.kernel.display.mime.*;\nimport net.imglib2.img.display.imagej.*;\nimport net.imglib2.view.*;\nimport net.imglib2.*;\n\ngetKernelInstance().getRenderer().createRegistration(RandomAccessibleInterval.class)\n        .preferring(MIMEType.IMAGE_PNG)\n        .supporting(MIMEType.IMAGE_JPEG, MIMEType.IMAGE_GIF)\n        .register((rai, context) -&gt; Image.renderImage(\n                ImageJFunctions.wrap(rai, rai.toString()).getBufferedImage(),\n                context));\n\ngetKernelInstance().getRenderer().createRegistration(String[].class)\n        .preferring(MIMEType.TEXT_PLAIN)\n        .supporting(MIMEType.TEXT_HTML, MIMEType.TEXT_MARKDOWN)\n        .register((array, context) -&gt; Text.renderCharSequence(Arrays.toString(array), context));\n\ngetKernelInstance().getRenderer().createRegistration(long[].class)\n        .preferring(MIMEType.TEXT_PLAIN)\n        .supporting(MIMEType.TEXT_HTML, MIMEType.TEXT_MARKDOWN)\n        .register((array, context) -&gt; Text.renderCharSequence(Arrays.toString(array), context));\n\ngetKernelInstance().getRenderer().createRegistration(Map.class)\n        .preferring(MIMEType.TEXT_PLAIN)\n        .supporting(MIMEType.TEXT_HTML, MIMEType.TEXT_MARKDOWN)\n        .register((map, context) -&gt; Text.renderCharSequence(map.toString(), context));\nWe will now open N5 datasets from some sources as lazy-loading ImgLib2 cell images. For opening the N5 readers, we will use the helper class N5Factory which parses the URL and/ or some magic byte in file headers to pick the right reader or writer for the various possible N5 backends. If you know which backend you are using, you should probably use the appropriate implementation directly, it’s not difficult.\nThat’s a bit low on contrast, let’s make it look like TEM, and let’s show a few of those hyperslices through the 3D volume:\nWe can list the attributes and their types of every group or dataset, and read any of them into matching types:\nLet’s save the contrast adjusted uin8 version of the volume into three N5 supported containers (N5, Zarr, and HDF5), parallelize writing for N5 and Zarr:\nNow let us look at them and see if they all contain the same data:\nLet’s clean up temporary storage before we end this tutorial."
  },
  {
    "objectID": "learning_resources/bigdataviewer_links.html",
    "href": "learning_resources/bigdataviewer_links.html",
    "title": "BigDataViewer (BDV) Resources",
    "section": "",
    "text": "GitHub Repository: https://github.com/bigdataviewer\nBigDataViewer ImageJ Documentation: https://imagej.net/plugins/bdv/"
  },
  {
    "objectID": "learning_resources/bigdataviewer_links.html#general-bigdataviwer-resources",
    "href": "learning_resources/bigdataviewer_links.html#general-bigdataviwer-resources",
    "title": "BigDataViewer (BDV) Resources",
    "section": "",
    "text": "GitHub Repository: https://github.com/bigdataviewer\nBigDataViewer ImageJ Documentation: https://imagej.net/plugins/bdv/"
  },
  {
    "objectID": "learning_resources/bigdataviewer_links.html#video-lectures",
    "href": "learning_resources/bigdataviewer_links.html#video-lectures",
    "title": "BigDataViewer (BDV) Resources",
    "section": "Video Lectures",
    "text": "Video Lectures\n\nBigDataViewer Presentation by Tobias Pietzsch, a [NEUBIAS Academy @Home] Webinar\nBig Data I: Visualisation, File Formats and Processing in FIJI\n\nVideo: https://www.youtube.com/watch?v=LHI7vXiUUms\n\nMarwan Zouinkhi How to Produce Videos with BigDataViewer\n\nVideo: https://www.youtube.com/watch?v=vXu4ZOboEio"
  },
  {
    "objectID": "learning_resources/bigdataviewer_links.html#tutorials-and-notebooks",
    "href": "learning_resources/bigdataviewer_links.html#tutorials-and-notebooks",
    "title": "BigDataViewer (BDV) Resources",
    "section": "Tutorials and Notebooks",
    "text": "Tutorials and Notebooks\n\nBigDataViewer playground: https://github.com/bigdataviewer/bigdataviewer-playground\n\nCollection of various add-on and query actions for BDV\n\nBigDataViewer-vistools: https://github.com/bigdataviewer/bigdataviewer-vistools\n\nDeliver the BdvFunctions class – API to make BDV a quick visualization tool in other projects\n\nDAIS learnathon by Florian Jug: https://github.com/fjug/TutorialBigDataViewer\n\nExample of how to view user image data in a BDV stand-alone window as well as in BDV embedded into one’s own frame\nHow to incrementally add images into one common view\nHow to show additional custom overlay data (such as spheres) over the pixel data\nHow to query and modify BDV state (such as view angle)\n\nDAIS learnathon by Tobias Pietzsch: Example how to draw in BDV into a virtual large image"
  },
  {
    "objectID": "learning_resources/bigdataviewer_links.html#references",
    "href": "learning_resources/bigdataviewer_links.html#references",
    "title": "BigDataViewer (BDV) Resources",
    "section": "References",
    "text": "References\n\nPublication : Pietzsch, T., Saalfeld, S., Preibisch, S., & Tomancak, P. (2015). BigDataViewer: Visualization and Processing for Large Image Data Sets. Nature Methods, 12(6), 481–483.,doi:10.1038/nmeth.3392\nSee also ImgLib2 Resources"
  },
  {
    "objectID": "index.html#this-is-the-joint-landing-page-for-imglib2-and-bigdataviewer-projects",
    "href": "index.html#this-is-the-joint-landing-page-for-imglib2-and-bigdataviewer-projects",
    "title": "ImgLib2 and BigDataviewer projects",
    "section": "This is the joint landing page for ImgLib2 and BigDataViewer projects!",
    "text": "This is the joint landing page for ImgLib2 and BigDataViewer projects!"
  },
  {
    "objectID": "ecosystem/BigDataProcessor2/BigDataProcessor2.html",
    "href": "ecosystem/BigDataProcessor2/BigDataProcessor2.html",
    "title": "BigDataProcessor2",
    "section": "",
    "text": "Load some data - title\nNow, we register a simple renderer that uses ImgLib2’s ImageJ bridge and Spencer Park’s image renderer to render the first 2D slice of a RandomAccessibleInterval into the notebook. We also add a renderer for arrays and maps, because we want to list directories and attributes maps later."
  },
  {
    "objectID": "ecosystem.html",
    "href": "ecosystem.html",
    "title": "Ecosystem",
    "section": "",
    "text": "BigDataProcessor2\n\n\n\n\n\n\n\nimglib2\n\n\nn5\n\n\nhdf5\n\n\nzarr\n\n\njupyter\n\n\nnotebook\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "learning_resources/imglib2_links.html",
    "href": "learning_resources/imglib2_links.html",
    "title": "ImgLib2 Resources",
    "section": "",
    "text": "Blog: https://imglib.github.io/imglib2-blog/\nGitHub Repository: https://github.com/imglib/imglib2\nImageJ Documentation: https://imagej.net/libs/imglib2/\n\n\n\n\nAlbert Cardona - Fast scripting with ImgLib2 in Fiji’s Script Editor\n\nVideo: Watch here\n\nStephan Saalfeld - Large data lazy processing with ImgLib2 and CLIJ2\n\nVideo: Watch here\n\n\n\n\n\n\nBlog example on Jupyter Notebook: How to Display ImgLib2 Data\n(LOCI?) ImageJ Tutorials Jupyter Notebook1: ImgLib2 Basics\n(LOCI?) ImageJ Tutorials Jupyter Notebook2: ImgLib2 in Detail\nImgLib2-intro : ImgLib2 introductory workshop (older)\nImgLib2-advanced : ImgLib2 advanced workshop (older)\nSaalfeldlab ImgLib2-intro I2K2020 ImgLib2 Intro\nSaalfeldlab ImgLib2-advanced : I2K2020 ImgLib2 Advanced\nSaalfeldlab i2k-tutorial: I2K2020 tutorial (Use N5, ImgLib2-Cache, and Spark)\nDAIS learnathon by Matthias Arzt: imglib2-algorithm-workshop\nDAIS learnathon by Tobias Pietzsch: imglib2-cache-examples\n\n\n\n\n\nLearning ImgLib2 Development\nOther threads on Image.sc\nImgLib2 Documentation on imagej.net wiki\n\n\n\n\n\nPublication : Tobias Pietzsch, Stephan Preibisch, Pavel Tomančák, Stephan Saalfeld, ImgLib2—generic image processing in Java, Bioinformatics, Volume 28, Issue 22, November 2012, Pages 3009–3011, https://doi.org/10.1093/bioinformatics/bts543\nSee also BigDataViewer Resources\n\n\n\n\n\nnta.kt (Saalfeld lab) The nta.kt library brings n-dimensional transformation and algebra to Kotlin. It combines the expressive power and flexibility of the Java image processing library ImgLib2 with the convenience and clarity that Kotlin language features provide.\nimglib2-trainable-segmentation (random forests) (Matthias Arzt, DAIS project) The repository shows example programs for segmentation of 2D and 3D images using random forests. One only needs to provide an input image and its (segmentation) labeling."
  },
  {
    "objectID": "learning_resources/imglib2_links.html#video-lectures",
    "href": "learning_resources/imglib2_links.html#video-lectures",
    "title": "ImgLib2 Resources",
    "section": "",
    "text": "Albert Cardona - Fast scripting with ImgLib2 in Fiji’s Script Editor\n\nVideo: Watch here\n\nStephan Saalfeld - Large data lazy processing with ImgLib2 and CLIJ2\n\nVideo: Watch here"
  },
  {
    "objectID": "learning_resources/imglib2_links.html#tutorials-and-notebooks",
    "href": "learning_resources/imglib2_links.html#tutorials-and-notebooks",
    "title": "ImgLib2 Resources",
    "section": "",
    "text": "Blog example on Jupyter Notebook: How to Display ImgLib2 Data\n(LOCI?) ImageJ Tutorials Jupyter Notebook1: ImgLib2 Basics\n(LOCI?) ImageJ Tutorials Jupyter Notebook2: ImgLib2 in Detail\nImgLib2-intro : ImgLib2 introductory workshop (older)\nImgLib2-advanced : ImgLib2 advanced workshop (older)\nSaalfeldlab ImgLib2-intro I2K2020 ImgLib2 Intro\nSaalfeldlab ImgLib2-advanced : I2K2020 ImgLib2 Advanced\nSaalfeldlab i2k-tutorial: I2K2020 tutorial (Use N5, ImgLib2-Cache, and Spark)\nDAIS learnathon by Matthias Arzt: imglib2-algorithm-workshop\nDAIS learnathon by Tobias Pietzsch: imglib2-cache-examples"
  },
  {
    "objectID": "learning_resources/imglib2_links.html#learning-imglib2-discussions-at-image.sc",
    "href": "learning_resources/imglib2_links.html#learning-imglib2-discussions-at-image.sc",
    "title": "ImgLib2 Resources",
    "section": "",
    "text": "Learning ImgLib2 Development\nOther threads on Image.sc\nImgLib2 Documentation on imagej.net wiki"
  },
  {
    "objectID": "learning_resources/imglib2_links.html#references",
    "href": "learning_resources/imglib2_links.html#references",
    "title": "ImgLib2 Resources",
    "section": "",
    "text": "Publication : Tobias Pietzsch, Stephan Preibisch, Pavel Tomančák, Stephan Saalfeld, ImgLib2—generic image processing in Java, Bioinformatics, Volume 28, Issue 22, November 2012, Pages 3009–3011, https://doi.org/10.1093/bioinformatics/bts543\nSee also BigDataViewer Resources"
  },
  {
    "objectID": "learning_resources/imglib2_links.html#uncategorized",
    "href": "learning_resources/imglib2_links.html#uncategorized",
    "title": "ImgLib2 Resources",
    "section": "",
    "text": "nta.kt (Saalfeld lab) The nta.kt library brings n-dimensional transformation and algebra to Kotlin. It combines the expressive power and flexibility of the Java image processing library ImgLib2 with the convenience and clarity that Kotlin language features provide.\nimglib2-trainable-segmentation (random forests) (Matthias Arzt, DAIS project) The repository shows example programs for segmentation of 2D and 3D images using random forests. One only needs to provide an input image and its (segmentation) labeling."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "contributing_guidelines/our_code_of_conduct.html",
    "href": "contributing_guidelines/our_code_of_conduct.html",
    "title": "ImgLib2 and BigDataviewer projects",
    "section": "",
    "text": "our_code_of_conduct content comes here…"
  }
]